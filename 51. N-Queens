class Solution {
public:
    unordered_map<int,bool> rowcheck;
    unordered_map<int,bool> upperdiagonalcheck;
    unordered_map<int,bool> lowerdiagonalcheck;

    void store(vector<vector<char>>&board,int n ,vector<vector<string>>&ans)
    {
        vector<string>temp;
        for(int i=0;i<n;i++)
        {
            string output="";
            for(int j =0;j<n;j++)
            {
                output.push_back(board[i][j]);
            }
            temp.push_back(output);
        }
        ans.push_back(temp);
    }
    bool issafe(int row,int col ,vector<vector<char>>& board,int n)
    {
        if(rowcheck[row]==true)return false;
        if(upperdiagonalcheck[n-1+col-row]==true)return false;
        if(lowerdiagonalcheck[row+col]==true)return false;
        return true;
        // int i =row;
        // int j = col;
        // //1
        // while(j>=0)
        // {
        //     if(board[i][j]=='Q')
        //     {
        //         return false;
        //     }
        //     j--;
        // }
        // //2
        // i =row;
        // j = col;
        //  while(i>=0&&j>=0)
        // {
        //     if(board[i][j]=='Q')
        //     {
        //         return false;
        //     }
        //     i--;j--;
        // }
        // //3
        // i =row;
        // j = col;
        //  while(j>=0&&i<n)
        // {
        //     if(board[i][j]=='Q')
        //     {
        //         return false;
        //     }
        //     j--;i++;
        // }
        // return true;
    }



    void solve(vector<vector<char>>&board,int col,int n,vector<vector<string>>&ans)
    {
        //base case
        if(col>=n)
        {
            store(board,n,ans);
        }
        for(int row=0;row<n;row++)
        {
            if(issafe(row,col,board,n))
            {
                board[row][col]='Q';
                rowcheck[row]=true;
                upperdiagonalcheck[n-1+col-row]= true;
                lowerdiagonalcheck[row+col]=true;
                solve(board,col+1,n,ans);
                board[row][col]='.';
                rowcheck[row]=false;
                upperdiagonalcheck[n-1+col-row]= false;
                lowerdiagonalcheck[row+col]=false;
               
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<char>>board(n,vector<char>(n,'.'));
         vector<vector<string>>ans;
        int col=0;
        solve(board,col,n,ans);
        return ans;
    }
};
